use std::env;
use std::fs;

// fn main() {
//     // Collect turns iterator into vector of values
//     // need to annotate the type we want so the compiler 
//     // knows which one to make when we call collect
//     let args: Vec<String> = env::args().collect();
//     let query = &args[1];
//     let filename = &args[2];
//     println!("Searching for {}", query);
//     println!("In file {}", filename);

//     let contents = fs::read_to_string(filename)
//         .expect("Something went wrong reading the file");

//     println!("With text:\n{}", contents);
// }
/////////////////////////////////////////////////////////////////////////////////
// fn main() {
//     // Collect turns iterator into vector of values
//     // need to annotate the type we want so the compiler 
//     // knows which one to make when we call collect
//     let args: Vec<String> = env::args().collect();
//     let config = parse_config(&args);

//     println!("Searching for {}", config.query);
//     println!("In file {}", config.filename);

//     let contents = fs::read_to_string(config.filename)
//         .expect("Something went wrong reading the file");

//     println!("With text:\n{}", contents);
// }

// struct Config {
//     query: String,
//     filename: String,
// }

// fn parse_config(args: &[String]) -> Config {
//     let query = args[1].clone();
//     let filename = args[2].clone();

//     Config{query,filename}

// }
//////////////////////////////////////////////////////////////////////////////////
fn main() {
    // Collect turns iterator into vector of values
    // need to annotate the type we want so the compiler 
    // knows which one to make when we call collect
    let args: Vec<String> = env::args().collect();
    let config = Config::new(&args);


    println!("Searching for {}", config.query);
    println!("In file {}", config.filename);

    let contents = fs::read_to_string(config.filename)
        .expect("Something went wrong reading the file");

    println!("With text:\n{}", contents);
}

struct Config {
    query: String,
    filename: String,
}

impl Config {
    fn new(args: &[String]) -> Config {
        let query = args[1].clone();
        let filename = args[2].clone();
        Config { query, filename }
    }
}

fn parse_config(args: &[String]) -> Config {
    let query = args[1].clone();
    let filename = args[2].clone();

    Config{query,filename}

}